import json
from transliterate import translit
from rapidfuzz import process, fuzz

from apps.normalize_text import clean_and_capitalize

# Fayldan shaharlar lug'atini o'qib olish
with open(r"C:\Users\Javoxir\PycharmProjects\tensor_bot\apps\regions.json", "r", encoding="utf8") as f:
    city_to_region = json.load(f)

# Barcha variantlarni normalize qilib, lug'atni tayyorlab qo'yamiz
all_variants = {}
for standard_name, variants in city_to_region.items():
    for v in variants:
        try:
            normalized_v = translit(v.strip().lower(), 'ru')  # Latin -> Cyrillic
        except Exception:
            normalized_v = v.strip().lower()
        all_variants[normalized_v] = standard_name


# Foydalanuvchi inputini normalize qiluvchi funksiya
def normalize(text: str) -> str:
    text = text.strip().lower()
    # Faqat lotin harfligina translit qilinadi
    if all('a' <= ch <= 'z' for ch in text if ch.isalpha()):
        try:
            text = translit(text, 'ru')
        except Exception:
            pass
    return text

def remove_suffix(word: str) -> str:
    suffixes = ['dan', 'ga', 'tan', 'ka', 'sha', 'gan','–¥–∞–Ω', '–≥–∞', '—Ç–∞–Ω', '–∫–∞', '—à–∞', '–≥–∞–Ω']
    for suffix in suffixes:
        if word.endswith(suffix) and len(word) > len(suffix) + 1:
            return word[: -len(suffix)]
    return word

def change_to_cyrillic(text):
    def is_latin(text):
        # Faqat lotin harflari (shu jumladan 'o‚Äò', 'g‚Äò') borligini tekshiradi
        import re
        return bool(re.match(r"^[A-Za-z0‚Äòg‚ÄòG‚ÄòO‚ÄòO'G']+(.*)?$", text.replace(" ", "")))

    if not is_latin(text):
        return text  # Kirill bo‚Äòlishi mumkin ‚Äî tarjima qilinmaydi

    # Lotindan Kirillga o‚Äòtkazuvchi funksiya
    latin_to_cyrillic = {
        "A": "–ê", "a": "–∞",
        "B": "–ë", "b": "–±",
        "D": "–î", "d": "–¥",
        "E": "–≠", "e": "—ç",
        "F": "–§", "f": "—Ñ",
        "G": "–ì", "g": "–≥",
        "H": "“≤", "h": "“≥",
        "I": "–ò", "i": "–∏",
        "J": "–ñ", "j": "–∂",
        "K": "–ö", "k": "–∫",
        "L": "–õ", "l": "–ª",
        "M": "–ú", "m": "–º",
        "N": "–ù", "n": "–Ω",
        "O": "–û", "o": "–æ",
        "P": "–ü", "p": "–ø",
        "Q": "“ö", "q": "“õ",
        "R": "–†", "r": "—Ä",
        "S": "–°", "s": "—Å",
        "T": "–¢", "t": "—Ç",
        "U": "–£", "u": "—É",
        "V": "–í", "v": "–≤",
        "X": "–•", "x": "—Ö",
        "Y": "–ô", "y": "–π",
        "Z": "–ó", "z": "–∑",
        "O‚Äò": "–é", "o‚Äò": "—û", "O'": "–é", "o'": "—û",
        "G‚Äò": "“í", "g‚Äò": "“ì", "G'": "“í", "g'": "“ì",
        "Sh": "–®", "sh": "—à",
        "Ch": "–ß", "ch": "—á",
        "Ya": "–Ø", "ya": "—è",
        "Yo": "–Å", "yo": "—ë",
        "Yu": "–Æ", "yu": "—é",
        "Ts": "–¶", "ts": "—Ü",
        "‚Äô": "—ä", "'": "—å",
        ",": ",", ".": ".", "-": "-", " ": " "
    }

    # 2 harfli kombinatsiyalarni birinchi tarjima qilish
    replacements = [
        ("O‚Äò", "–é"), ("o‚Äò", "—û"), ("O'", "–é"), ("o'", "—û"),
        ("G‚Äò", "“í"), ("g‚Äò", "“ì"), ("G'", "“í"), ("g'", "“ì"),
        ("Sh", "–®"), ("sh", "—à"),
        ("Ch", "–ß"), ("ch", "—á"),
        ("Ya", "–Ø"), ("ya", "—è"),
        ("Yo", "–Å"), ("yo", "—ë"),
        ("Yu", "–Æ"), ("yu", "—é"),
        ("Ts", "–¶"), ("ts", "—Ü"),
    ]

    for latin, cyrillic in replacements:
        text = text.replace(latin, cyrillic)

    # Qolgan belgilarni tarjima qilish
    result = ""
    for char in text:
        result += latin_to_cyrillic.get(char, char)

    return result

# Topilgan shahar bo‚Äòyicha standart regionni qaytaruvchi funksiya
def find_region_type(user_input: str) -> str:
    result = []

    regions = user_input.split(',')

    regions = regions[0].split(' ')

    for region in regions:
        region = region.strip()

        if region != "–ù–ê–õ–ò–ß–ù–´–ôüíµ":
            region = remove_suffix(region)
            query = normalize(region)

            match, score, _ = process.extractOne(query, all_variants.keys(), scorer=fuzz.ratio)

            if score >= 80:
                return all_variants[match]
            else:
                region = change_to_cyrillic(region)
                result.append(region)

    res=clean_and_capitalize(result[0])
    # res = clean_and_capitalize(", ".join(result))
    return res

# text="–£–ó–ë –¢–û–®–ö–ï–ù–¢,–£–ó–ë –í–û–î–ò–ô"
#
# print(find_region_type(text))\

